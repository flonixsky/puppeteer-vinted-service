# Vinted Resell Automation - AI Agent Context

## 🎯 PROJECT MISSION
Automatisiere den kompletten Reselling-Workflow: Foto → KI-Analyse → Vinted Upload → Verkauf

## 📍 CURRENT STATUS (Stand: 16. Oktober 2025, 00:38 Uhr)

### ✅ Was funktioniert
- Backend mit Supabase (PostgreSQL)
- Cloudinary Bildverwaltung
- OpenAI Vision API (Produkt-Analyse)
- **Playwright Service (Browser-Automation)** ✅ Migration abgeschlossen!
- Cookie-Management (manueller Login via Helper-Script)
- n8n Workflow für komplette Pipeline
- **Vinted Upload füllt aus:** Titel + Beschreibung + Preis
- **Auto-Reconnect Script:** Network-Connection nach Coolify-Restart (Cron-Job alle 5 Min)
- **Debug-Endpoints:** GET /debug/upload-form + POST /debug/category-click
- **Kategorie-Mapping:** 219 Vinted-Kategorien mit Scoring-System (src/utils/categoryMapping.js)
- **Playwright Locators:** Bessere Selektoren mit getByText(), getByRole()
- **Auto-Waiting:** Keine race conditions mehr bei dynamischen Elementen
- **✅ FOTO-UPLOAD:** Funktioniert! Findet input mit #photos input.u-hidden 🎉

### ⚠️ AKTUELLES PROBLEM: Kategorie-Selector navigiert zur falschen Seite!

**Das Problem (16. Oktober 2025):**
- Category Selector klickt **Navigation-Links** statt **Form-Elemente**!
- Resultat: Navigiert von `/items/new` → `/catalog?...` (falsche Seite!)
- Dadurch verschwinden ALLE Form-Elemente (Brand, Size, etc. = 0)
- Submit-Button nicht findbar (wir sind nicht mehr auf Upload-Seite)

**Test-Ergebnis zeigt:**
```
✅ Photo upload: Works! (Selector: #photos input.u-hidden)
✅ Titel/Beschreibung/Preis: Filled successfully
❌ Category: Navigates to /catalog (WRONG!)
❌ Brand/Size/Condition/Color: Never reached (erscheinen nach Category)
❌ Submit: Not found (wrong page)
```

**Wichtige Erkenntnis vom User:**
> "Brand, Größe, Zustand etc. erscheinen NACH Kategorie-Auswahl"
> "Sie sehen aus wie Dropdowns, sind aber keine echten <select> Elemente"
> "Gleiche UI wie Kategorie-Auswahl!"

**Das bedeutet:**
- Alle diese Felder (Category, Brand, Size, Condition, Color) nutzen **CUSTOM UI**
- Keine Standard HTML `<select>` Dropdowns
- Pattern: Button klicken → Modal/Menu öffnet sich → Option auswählen
- CategorySelector klickt aktuell die falschen Buttons (Navigation statt Form)

### ❌ Was noch fehlt
1. **PRIO 1:** Category Selector FIX - Muss auf `/items/new` bleiben!
   - Problem: Klickt Navigation-Links statt Form-Buttons
   - Lösung: Form-spezifische Selektoren finden (nicht catalog-Links)
2. **PRIO 2:** Brand/Size/Condition/Color implementieren
   - Nutzen gleiche custom UI wie Category
   - Erscheinen erst NACH Category-Auswahl
   - Brauchen gleiche Button-Click → Option-Select Logic
3. **PRIO 3:** Submit-Button finden (auf richtiger Seite!)

---

## 🏗️ TECH STACK

**Backend:**
- Node.js 18+ / Express
- **Playwright (Browser-Automation)** - ✅ v3.0 (mit CategorySelector)
- Supabase (PostgreSQL)
- Docker (via Coolify)
- n8n (Workflow-Engine)

**APIs:**
- OpenAI Vision (gpt-4-vision-preview)
- Cloudinary (Image Storage)
- Supabase (Database + Storage)

**Deployment:**
- Git-based (automatisches Deploy via Coolify)
- WSL Ubuntu auf Windows
- Docker Network: `pkkwkkkc04s04s84k8oo0k0o`

**Version History:**
- **v1.0:** Puppeteer-basiert (vor Oktober 2025)
- **v2.0:** Playwright Migration (14. Oktober 2025)
- **v3.0:** CategorySelector Service - Kategorie-Problem gelöst! (14. Oktober 2025, 18:16 Uhr)

---

## 📁 PROJECT STRUCTURE

```
~/puppeteer-vinted-service/
├─ src/
│  ├─ controllers/
│  │  ├─ health.js          # Health checks
│  │  ├─ login.js           # Cookie management
│  │  ├─ vinted.js          # Upload orchestration
│  │  ├─ categoryTest.js    # Test endpoint
│  │  └─ debugVinted.js     # 🆕 Debug endpoints für Form-Analyse
│  ├─ services/
│  │  ├─ playwright.js      # Browser wrapper (Playwright)
│  │  ├─ supabase.js        # DB client
│  │  ├─ vinted.js          # Vinted-specific helpers
│  │  └─ categorySelector.js # 🆕 🔥 Kategorie-Auswahl Service (9 Strategien)
│  ├─ utils/
│  │  ├─ logger.js          # Winston logger
│  │  ├─ categoryMapping.js # Kategorie-Logic (219 Kategorien)
│  │  └─ vintedCategoriesData.json # Alle Vinted-Kategorien
│  └─ index.js              # Express server + routes
├─ Dockerfile
├─ package.json
├─ .env                     # Secrets (NOT in git!)
├─ .env.example
└─ README.md
```

**Wichtige externe Dateien:**
- Login Helper: `C:\Users\buris\vinted-login-helper\login.js` (Windows)
- Test Script: `C:\Users\buris\vinted-upload-test\simple-test.js` (lokaler Test mit sichtbarem Browser)

---

## 🗄️ DATABASE SCHEMA (Supabase)

### Wichtigste Tabellen:

**articles** - Produktdaten
```sql
- id, title, description, brand, category, size, color, condition
- price_min, price_max, price_recommended
- original_image_url, processed_image_url, image_urls (JSONB)
- ai_analysis (JSONB), measurements (JSONB)
- storage_location, status, vinted_id, vinted_url
- created_at, updated_at, sold_at
```

**vinted_sessions** - Cookie-Management
```sql
- id, account_email, cookies (JSONB), user_agent
- session_valid, valid_until, last_used, login_attempts
```

**storage_locations** - Lagerverwaltung
```sql
- id (z.B. "A1"), section, position, occupied
- article_id, occupied_since, notes
```

---

## 🚀 DEPLOYMENT WORKFLOW

**Nach Code-Änderungen:**
```bash
cd ~/puppeteer-vinted-service
git add .
git commit -m "Your message"
git push
# → Coolify deployed automatisch via Git Webhook

# ⚠️ WICHTIG: Nach JEDEM Redeploy!
docker network connect pkkwkkkc04s04s84k8oo0k0o puppeteer-vinted-service
```

**Logs checken:**
```bash
docker logs -f puppeteer-vinted-service
docker logs --tail 50 puppeteer-vinted-service

# Kategorie-Logs filtern:
docker logs puppeteer-vinted-service | grep -E "(Selected|data-testid|✓)"
```

---

## 🔑 API ENDPOINTS (Port 3001)

**Health:**
- `GET /health` - Basic health check
- `GET /ready` - Ready check (DB connection)

**Cookie Management:**
- `POST /cookies/upload` - Upload Cookies from login helper
- `GET /session/status` - Check session validity

**Vinted Upload:**
- `POST /vinted/publish` - Main upload endpoint
  ```json
  Body: { "articleId": 1 }
  Response: { 
    "success": true, 
    "vinted": {
      "url": "https://www.vinted.de/catalog?catalog[]=221",
      "id": "test-..."
    },
    "duration": 62652 
  }
  ```

**Debug Endpoints:**
- `GET /debug/upload-form` - Analysiert Upload-Formular Struktur
- `POST /debug/category-click` - Testet verschiedene Click-Strategien

**Test Endpoints:**
- `POST /test/category` - Test category navigation
- `GET /test/categories` - List all 219 categories

---

## ✅ SOLVED: Kategorie-Auswahl

### Das Problem war:
1. Annahme dass es ein Dropdown gibt → **FALSCH!**
2. Versuch "Wähle eine Kategorie" Button zu finden → **EXISTIERT NICHT!**
3. Alle 9 Dropdown-Strategien schlugen fehl

### Die Lösung:
**Vinted zeigt Kategorien direkt auf der Seite an:**
- Erste Ebene: `data-testid="first-category-1904"` → "Damen"
- Zweite Ebene: `data-testid="second-category-4"` → "Kleidung"
- Weitere Ebenen: Text-basierte Selektoren mit exact match

**CategorySelector Service (`src/services/categorySelector.js`):**
```javascript
// Hauptstrategie 1: Vinted-spezifische data-testid
'[data-testid^="first-category-"]'  // Erste Ebene
'[data-testid*="category"]'          // Alle Ebenen

// Fallback-Strategien (2-9) für tiefere Ebenen
page.getByText(categoryName, { exact: true })
page.getByRole('button', { name: categoryName })
// ... 7 weitere Strategien
```

**Wichtige Details:**
- Split-Character: ` → ` (mit Leerzeichen), nicht ` > `
- Multiple Element Handling: Sucht ALLE Elemente, probiert alle sichtbaren
- Visibility Checks: Nur sichtbare Elemente werden angeklickt
- Wait-Times: 1500-2000ms zwischen Ebenen für Page-Transitions

**Git Commits:**
- `b3b4296` - Debug-Endpoints
- `2088233` - CategorySelector erstellt
- `4ceb26e` - Bug-Fix Debug-Endpoint
- `7a9ad93` - Visibility-Checks & Timing
- `a0940f9` - **Finale Lösung: data-testid Selektoren** ✅

---

## 🧪 TESTING

**API Test:**
```bash
# Test mit Artikel ID 1
curl -X POST http://localhost:3001/vinted/publish \
  -H "Content-Type: application/json" \
  -d '{"articleId": 1}'

# Expected: Success nach ~60 Sekunden
```

**Logs live verfolgen:**
```bash
docker logs -f puppeteer-vinted-service | grep -E "(Starting category|Selected|data-testid)"
```

**Lokal testen (mit sichtbarem Browser):**
```bash
cd C:\Users\buris\vinted-upload-test
node simple-test.js
```

---

## 💡 IMPORTANT NOTES FOR AI AGENT

### Code Style Preferences:
- Use async/await (not callbacks)
- Prefer try/catch for error handling
- Use Winston logger (not console.log)
- Make screenshots on errors for debugging
- Always wait for dynamic content (Vinted uses React)

### Vinted-Specific Insights:
1. **NO Dropdown for Categories:** Displayed directly on page with data-testid
2. **Dynamic Form:** Fields appear based on category selection
3. **No Official API:** We reverse-engineer the website
4. **Rate Limiting:** Be careful with requests
5. **Session Management:** Cookies expire after 7 days
6. **Category Hierarchy:** Up to 5 levels (Damen → Kleidung → Jacken → Bomberjacken → Lederjacken)
7. **data-testid Pattern:** `first-category-*`, `second-category-*`, etc.

### When Making Changes:
1. Test locally first (`simple-test.js`)
2. Check Docker logs after deploy
3. Always do network reconnect after Coolify deploy
4. Take screenshots on errors
5. Update this file if architecture changes significantly

---

## 🎯 NEXT TASKS (Priority Order)

### ✅ COMPLETED: Category Navigation
**Status:** ✅ GELÖST (14. Oktober 2025)
**Solution:** CategorySelector Service mit data-testid Strategien
**Test:** Erfolgreich für Damen → Kleidung → Tops & T-Shirts → T-Shirts

### TASK 1: Implement Photo Upload 🔥
**Goal:** Upload Bilder von Cloudinary zu Vinted
**Files:** `src/services/vinted.js`, `src/controllers/vinted.js`
**Data:** Image URLs sind in `articles.image_urls` (JSONB array)
**Challenge:** 
- Vinted erwartet File Input (nicht URL)
- Bilder müssen gedownloaded → als File hochgeladen werden
- Mehrere Bilder pro Artikel (bis zu 20)
- Thumbnail-Generierung

### TASK 2: Fill All Form Fields
**Goal:** Größe, Farbe, Zustand, Preis ausfüllen
**Files:** `src/services/vinted.js`
**Data:** Kommt von OpenAI Vision API (`articles.ai_analysis`)
**Status:** Brand-Feld funktioniert bereits
**Remaining:** Size, Color, Condition, Price
**Challenge:** Felder erscheinen erst nach Kategorie-Auswahl (bereits gelöst durch Category-Fix)

### TASK 3: Enable Submit Button
**Goal:** Artikel wirklich publishen (nicht nur Test-ID generieren)
**Location:** `src/services/vinted.js` - remove test mode
**WARNING:** Erst aktivieren wenn Photo-Upload + alle Felder funktionieren!

### TASK 4: Error Recovery & Retry Logic
**Goal:** Robustes Handling von Fehlern während Upload
**Ideas:**
- Retry bei Timeout
- Cookie-Refresh bei Session-Expired
- Screenshot + Error-Report bei Failure
- Queue-System für failed uploads

---

## 📚 USEFUL COMMANDS

```bash
# Service Status
docker ps | grep puppeteer
docker logs -f puppeteer-vinted-service
docker logs --tail 50 puppeteer-vinted-service

# Kategorie-Debug
docker logs puppeteer-vinted-service | grep -E "(category|Selected|data-testid)"

# Network
docker network connect pkkwkkkc04s04s84k8oo0k0o puppeteer-vinted-service

# Git
git status
git add .
git commit -m "message"
git push

# Testing
curl -X POST http://localhost:3001/vinted/publish \
  -H "Content-Type: application/json" \
  -d '{"articleId": 1}'

# Cookie Refresh
cd ~/vinted-login-helper && node login.js flonixsky@gmail.com
```

---

## 🌐 SERVICE URLS

**From WSL/Host:**
- n8n: http://localhost:5678
- Service: http://localhost:3001

**Docker Internal:**
- n8n: http://n8n-pkkwkkkc04s04s84k8oo0k0o:5678
- Service: http://puppeteer-vinted-service:3001

---

## 👤 USER INFO

- **Email:** flonixsky@gmail.com
- **Location:** Dortmund, Germany
- **Vinted Account:** Same email
- **Cookie Session:** Stored in `vinted_sessions` table (expires after 7 days)

---

## ⚠️ CRITICAL REMINDERS

1. **Never commit secrets** (.env is in .gitignore)
2. **Always network reconnect after deploy** (Coolify Docker bug)
3. **Cookies expire after 7 days** (run login helper before testing)
4. **Submit is disabled on purpose** (test mode until photo-upload works)
5. **Take screenshots on errors** (essential for debugging Vinted)
6. **Test locally first** (use simple-test.js before production deploy)
7. **Check logs after deploy** (verify category selection works)

---

## 🤖 AI AGENT INSTRUCTIONS

**When asked to implement features:**
1. Read relevant files first (especially categorySelector.js für Referenz)
2. Understand current implementation
3. Propose solution before coding
4. Write clean, commented code with error handling
5. Add Winston logging at key points
6. Test locally if possible
7. Update this file if architecture changes

**When debugging:**
1. Check Docker logs first (`docker logs puppeteer-vinted-service`)
2. Look for screenshots in error responses
3. Verify cookies are still valid (`GET /session/status`)
4. Check network connection (reconnect command)
5. Use debug endpoints (`/debug/upload-form`, `/debug/category-click`)

**When deploying:**
1. Git commit with clear, descriptive message
2. Push to trigger Coolify auto-deploy
3. Wait ~30 seconds for container rebuild
4. Run network reconnect: `docker network connect pkkwkkkc04s04s84k8oo0k0o puppeteer-vinted-service`
5. Check logs: `docker logs --tail 20 puppeteer-vinted-service`
6. Test endpoint: `curl -X POST http://localhost:3001/vinted/publish -H "Content-Type: application/json" -d '{"articleId": 1}'`

---

**Last Updated:** 16. Oktober 2025, 00:38 Uhr  
**Status:** 🟡 Photo-Upload funktioniert! Category navigiert zur falschen Seite  
**Version:** v4.0 (Photo Upload works, Category needs fix)  
**Current Milestone:** Category Selector reparieren (Form statt Navigation)  
**Next Milestone:** Brand/Size/Condition/Color mit gleicher Logic wie Category  
**CRITICAL:** URL muss `/items/new` bleiben während Upload-Prozess!
